## -*- mode: ruby -*-
## vi: set ft=ruby :
#
## All Vagrant configuration is done below. The "2" in Vagrant.configure
## configures the configuration version (we support older styles for
## backwards compatibility). Please don't change it unless you know what
## you're doing.
#Vagrant.configure("2") do |config|
#  # The most common configuration options are documented and commented below.
#  # For a complete reference, please see the online documentation at
#  # https://docs.vagrantup.com.
#
#  # Every Vagrant development environment requires a box. You can search for
#  # boxes at https://vagrantcloud.com/search.
#  config.vm.box = "base"
#
#  # Disable automatic box update checking. If you disable this, then
#  # boxes will only be checked for updates when the user runs
#  # `vagrant box outdated`. This is not recommended.
#  # config.vm.box_check_update = false
#
#  # Create a forwarded port mapping which allows access to a specific port
#  # within the machine from a port on the host machine. In the example below,
#  # accessing "localhost:8080" will access port 80 on the guest machine.
#  # config.vm.network "forwarded_port", guest: 80, host: 8080
#
#  # Create a private network, which allows host-only access to the machine
#  # using a specific IP.
#  # config.vm.network "private_network", ip: "192.168.33.10"
#
#  # Create a public network, which generally matched to bridged network.
#  # Bridged networks make the machine appear as another physical device on
#  # your network.
#  # config.vm.network "public_network"
#
#  # Share an additional folder to the guest VM. The first argument is
#  # the path on the host to the actual folder. The second argument is
#  # the path on the guest to mount the folder. And the optional third
#  # argument is a set of non-required options.
#  # config.vm.synced_folder "../data", "/vagrant_data"
#
#  # Provider-specific configuration so you can fine-tune various
#  # backing providers for Vagrant. These expose provider-specific options.
#  # Example for VirtualBox:
#  #
#  # config.vm.provider "virtualbox" do |vb|
#  #   # Display the VirtualBox GUI when booting the machine
#  #   vb.gui = true
#  #
#  #   # Customize the amount of memory on the VM:
#  #   vb.memory = "1024"
#  # end
#  #
#  # View the documentation for the provider you are using for more
#  # information on available options.
#
#  # Enable provisioning with a shell script. Additional provisioners such as
#  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
#  # documentation for more information about their specific syntax and use.
#  # config.vm.provision "shell", inline: <<-SHELL
#  #   apt-get update
#  #   apt-get install -y apache2
#  # SHELL
#end

MACHINES = {
  :otuslinux => {
        :box_name => "centos/7",
        :ip_addr => '192.168.11.101',
	:disks => {
		:sata1 => {
			:dfile => './sata1.vdi',
			:size => 850,
			:port => 1
		},
		:sata2 => {
                        :dfile => './sata2.vdi',
                        :size => 850, # Megabytes
			:port => 2
		},
                :sata3 => {
                        :dfile => './sata3.vdi',
                        :size => 850,
                        :port => 3
                },
                :sata4 => {
                        :dfile => './sata4.vdi',
                        :size => 850, # Megabytes
                        :port => 4
                }

	}

		
  },
}

Vagrant.configure("2") do |config|

	MACHINES.each do |boxname, boxconfig|

      	config.vm.define boxname do |box|

		box.vm.box = boxconfig[:box_name]
		box.vm.host_name = boxname.to_s

 		box.vm.network "private_network", ip: boxconfig[:ip_addr]

        	box.vm.provider :virtualbox do |vb|
        		vb.customize ["modifyvm", :id, "--memory", "1024"]
			vb.customize ["storagectl", :id, "--name", "SATA", "--add", "sata" ]

		  	boxconfig[:disks].each do |dname, dconf|
			  	unless File.exist?(dconf[:dfile])
					vb.customize ['createhd', '--filename', dconf[:dfile], '--variant', 'Fixed', '--size', dconf[:size]]
				end
				vb.customize ['storageattach', :id,  '--storagectl', 'SATA', '--port', dconf[:port], '--device', 0, '--type', 'hdd', '--medium', dconf[:dfile]]
			end
         	end
 	box.vm.provision "shell", inline: <<-SHELL
	      	mkdir -p ~root/.ssh
             	cp ~vagrant/.ssh/auth* ~root/.ssh
	      	yum install -y mdadm smartmontools hdparm gdisk expect
		sudo mdadm --create /dev/md0 -l 5 -n 4 /dev/sd{a,b,c,d}
  	SHELL
	box.vm.provision "shell", path: "parted.sh"
	end
  	end
end

